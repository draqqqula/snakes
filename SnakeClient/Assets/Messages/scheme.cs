// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace MessageSchemes
{

using global::System;
using global::FlatBuffers;

public struct Vec2 : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Vec2 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float X { get { return __p.bb.GetFloat(__p.bb_pos + 0); } }
  public float Y { get { return __p.bb.GetFloat(__p.bb_pos + 4); } }

  public static Offset<MessageSchemes.Vec2> CreateVec2(FlatBufferBuilder builder, float X, float Y) {
    builder.Prep(4, 8);
    builder.PutFloat(Y);
    builder.PutFloat(X);
    return new Offset<MessageSchemes.Vec2>(builder.Offset);
  }
};

public struct Message : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static Message GetRootAsMessage(ByteBuffer _bb) { return GetRootAsMessage(_bb, new Message()); }
  public static Message GetRootAsMessage(ByteBuffer _bb, Message obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Message __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public MessageSchemes.Group? Groups(int j) { int o = __p.__offset(4); return o != 0 ? (MessageSchemes.Group?)(new MessageSchemes.Group()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int GroupsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<MessageSchemes.Message> CreateMessage(FlatBufferBuilder builder,
      VectorOffset groupsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Message.AddGroups(builder, groupsOffset);
    return Message.EndMessage(builder);
  }

  public static void StartMessage(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddGroups(FlatBufferBuilder builder, VectorOffset groupsOffset) { builder.AddOffset(0, groupsOffset.Value, 0); }
  public static VectorOffset CreateGroupsVector(FlatBufferBuilder builder, Offset<MessageSchemes.Group>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateGroupsVectorBlock(FlatBufferBuilder builder, Offset<MessageSchemes.Group>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartGroupsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<MessageSchemes.Message> EndMessage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<MessageSchemes.Message>(o);
  }
};

public struct Group : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static Group GetRootAsGroup(ByteBuffer _bb) { return GetRootAsGroup(_bb, new Group()); }
  public static Group GetRootAsGroup(ByteBuffer _bb, Group obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Group __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public MessageSchemes.Frame? Frames(int j) { int o = __p.__offset(4); return o != 0 ? (MessageSchemes.Frame?)(new MessageSchemes.Frame()).__assign(__p.__vector(o) + j * 24, __p.bb) : null; }
  public int FramesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string Asset { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAssetBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetAssetBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetAssetArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<MessageSchemes.Group> CreateGroup(FlatBufferBuilder builder,
      VectorOffset framesOffset = default(VectorOffset),
      StringOffset assetOffset = default(StringOffset)) {
    builder.StartTable(2);
    Group.AddAsset(builder, assetOffset);
    Group.AddFrames(builder, framesOffset);
    return Group.EndGroup(builder);
  }

  public static void StartGroup(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddFrames(FlatBufferBuilder builder, VectorOffset framesOffset) { builder.AddOffset(0, framesOffset.Value, 0); }
  public static void StartFramesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(24, numElems, 4); }
  public static void AddAsset(FlatBufferBuilder builder, StringOffset assetOffset) { builder.AddOffset(1, assetOffset.Value, 0); }
  public static Offset<MessageSchemes.Group> EndGroup(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<MessageSchemes.Group>(o);
  }
};

public struct Frame : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Frame __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public MessageSchemes.Vec2 Position { get { return (new MessageSchemes.Vec2()).__assign(__p.bb_pos + 0, __p.bb); } }
  public MessageSchemes.Vec2 Size { get { return (new MessageSchemes.Vec2()).__assign(__p.bb_pos + 8, __p.bb); } }
  public float Angle { get { return __p.bb.GetFloat(__p.bb_pos + 16); } }
  public int Id { get { return __p.bb.GetInt(__p.bb_pos + 20); } }

  public static Offset<MessageSchemes.Frame> CreateFrame(FlatBufferBuilder builder, float position_X, float position_Y, float size_X, float size_Y, float Angle, int Id) {
    builder.Prep(4, 24);
    builder.PutInt(Id);
    builder.PutFloat(Angle);
    builder.Prep(4, 8);
    builder.PutFloat(size_Y);
    builder.PutFloat(size_X);
    builder.Prep(4, 8);
    builder.PutFloat(position_Y);
    builder.PutFloat(position_X);
    return new Offset<MessageSchemes.Frame>(builder.Offset);
  }
};


}
